// ===============================================================
// CODE1 — Inserção linha a linha no banco (sem limpeza prévia)
// ===============================================================

// Helpers
function toCodigoOrNull(v) {
  if (v === null || v === undefined) return null;
  const s = String(v).trim();
  return /^\d+$/.test(s) ? Number(s) : null;
}
function toJSON(v) {
  try { return JSON.stringify(v ?? []); } catch { return "[]"; }
}

async function run() {
  // 1) Carrega novos e existentes
  const dfNovo  = Alocacao_agentes_comercial.data?.df_consolidado || [];
  const dfExist = Roteamento_dos_Grupos_Prontos.data?.df_existentes_padronizado || [];
  let dados = [...dfNovo, ...dfExist];

  if (!dados.length) {
    console.warn("⚠️ Nenhum registro encontrado (df_consolidado + df_existentes_padronizado).");
    return { total: 0, sucesso: 0, falhas: 0, erros: ['sem dados'] };
  }

  // 2) Ordena por score para manter a priorização
  dados.sort((a, b) => {
    const sa = Number(a.score_precatorio) || 0;
    const sb = Number(b.score_precatorio) || 0;
    return sb - sa; // maior → menor
  });

  // 3) Realiza a inserção linha a linha
  let sucesso = 0;
  let falhas  = 0;
  const erros = [];

  for (const r of dados) {
    try {
      await insert_linha_consolidado.trigger({
        additionalScope: {
          codigo_agente: toCodigoOrNull(r.codigo_agente),
          nome_agente:   r.nome_agente ?? 'Não alocado',
          cpf_tratado:   r.cpf_tratado ?? '',
          cards_ids_do_cpf: toJSON(r.cards_ids_do_cpf),
          score_precatorio: String(r.score_precatorio ?? ''),
          oferta_maxima: String(r.oferta_maxima ?? ''),
          peso_ente:   String(r.peso_ente ?? ''),
          peso_data:   String(r.peso_data ?? ''),
          // Envia os campos novos, caso existam
          tempo_na_esteira: String(r.tempo_na_esteira ?? ''),
          patch_entrada: r.patch_entrada != null ? Number(r.patch_entrada) : null,
          patch_atual:  r.patch_atual  != null ? Number(r.patch_atual)  : null
        }
      });
      sucesso++;
    } catch (e) {
      falhas++;
      erros.push({
        cpf: r.cpf_tratado ?? '',
        erro: e?.message ?? String(e)
      });
    }
  }

  console.log(`✅ Inserção concluída. Sucesso: ${sucesso} / Falhas: ${falhas}`);
  return { total: dados.length, sucesso, falhas, erros };
}

return run();
